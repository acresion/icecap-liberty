
apply plugin: 'liberty'
apply plugin: 'war'

sourceCompatibility = 17
targetCompatibility = 17

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceSets {
     integrationTest {
         java{
         	srcDirs = ["src/integrationTest/java"]
         }
         resources{
         
         	srcDirs = ["src/integrationTest/resources"]
         }
     }
 }
buildscript {
    repositories {
        // tag::buildmaven[]
        mavenCentral()
        // end::buildmaven[]
    }
    dependencies {
        // tag::liberty-dependency[]
        classpath 'io.openliberty.tools:liberty-gradle-plugin:3.9.3'
        // end::liberty-dependency[]
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    implementation project(':icecap-api')
    
    implementation libs.mysql
    implementation libs.guava
    implementation libs.gson
    implementation libs.json
    implementation libs.javax.ws.rs
    implementation libs.javax.annotation
    implementation libs.javax.servlet
    
    providedCompile libs.microprofile
    
    testImplementation libs.junit.jupiter
    testImplementation libs.httpclient5
	testImplementation libs.mockito
	integrationTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    integrationTestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
	
	
	
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'   
}

ext  {
    liberty.server.var.'http.port' = '9080'
    liberty.server.var.'https.port' = '9443'
    liberty.server.var.'app.context.root' = '/icecap'
    
    
    liberty.server.var.'WLP_LOGGING_MESSAGE_FORMAT'='json'
    liberty.server.var.'WLP_LOGGING_MESSAGE_SOURCE'='message,trace,accessLog,ffdc,audit'


    liberty.server.var.'mysql_dbname' = 'icecap'
    liberty.server.var.'mysql_host' = 'localhost'
    liberty.server.var.'mysql_port' = '3306'
    liberty.server.var.'mysql_user' = project.findProperty('mysql_user')
    
    //liberty.server.var.'mysql_user' = 'root'
    // don't push with this existing:
    
    openapi_port = 9080
    openapi_context_root = 'openapi/ui'
    

}

task integrationTest(type: Test) {
         description = 'Runs integration tests'
         group = 'verification'
         testClassesDirs = sourceSets.integrationTest.output.classesDirs
         classpath = sourceSets.integrationTest.runtimeClasspath
     }

task openBrowser {
    description = 'Open browser to OPENAPI'
    doLast {
        String port =  openapi_port
        String context = openapi_context_root
        String URL = "http://localhost:" + port + "/" + context 
        java.awt.Desktop.desktop.browse URL.toURI()
        java.awt.Desktop.desktop.browse file("$buildDir/reports/tests/test/index.html").toURI()
    }
}


// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

liberty {
    server {
        env = [    
              'mysql_dbname' : 'icecap' ,
              'mysql_host'   : 'localhost', 
              'mysql_port'   : '3306',
              'WLP_LOGGING_CONSOLE_LOGLEVEL' :    'info',
              'WLP_LOGGING_MESSAGE_SOURCE'  :   'message,trace,accessLog,ffdc,audit',
              'WLP_LOGGING_MESSAGE_FORMAT' : 'json',
              'mysql_user' : project.findProperty('mysql_user'),
              'mysql_password' : project.findProperty('mysql_password')

         
         ]
        //jvmOptions = ['-Xms128m', '-Xmx512m']
    }
}
tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    
    testLogging {
        events 'passed', 'skipped', 'failed', 'standardOut'
        exceptionFormat 'full'
    }
    systemProperty 'http.port', liberty.server.var.'http.port'
    // end::httpport[]
    // tag::contextroot[]
    systemProperty 'context.root',  liberty.server.var.'app.context.root'
    
    
}

test.dependsOn 'libertyStart' 
// test.finalizedBy(openBrowser)
check.dependsOn integrationTest
clean.dependsOn 'libertyStop'
